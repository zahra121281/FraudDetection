# Generated from E:/Sem6/Compiler/FraudDetection/grammar/DetectCommands.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,337,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,5,18,285,8,18,10,18,12,18,288,9,18,1,18,1,18,1,
        19,4,19,293,8,19,11,19,12,19,294,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,21,4,21,310,8,21,11,21,12,21,311,1,
        21,1,21,5,21,316,8,21,10,21,12,21,319,9,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,4,26,330,8,26,11,26,12,26,331,1,26,1,26,1,
        27,1,27,0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,0,47,0,49,0,51,0,53,23,55,24,1,0,6,1,0,34,34,1,0,48,57,2,0,
        65,90,97,122,3,0,48,57,65,90,97,122,2,0,45,46,64,64,3,0,9,9,13,13,
        32,32,338,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,
        0,0,0,3,65,1,0,0,0,5,70,1,0,0,0,7,80,1,0,0,0,9,86,1,0,0,0,11,100,
        1,0,0,0,13,113,1,0,0,0,15,126,1,0,0,0,17,142,1,0,0,0,19,149,1,0,
        0,0,21,158,1,0,0,0,23,167,1,0,0,0,25,195,1,0,0,0,27,223,1,0,0,0,
        29,247,1,0,0,0,31,258,1,0,0,0,33,267,1,0,0,0,35,274,1,0,0,0,37,282,
        1,0,0,0,39,292,1,0,0,0,41,296,1,0,0,0,43,309,1,0,0,0,45,320,1,0,
        0,0,47,322,1,0,0,0,49,324,1,0,0,0,51,326,1,0,0,0,53,329,1,0,0,0,
        55,335,1,0,0,0,57,58,5,83,0,0,58,59,5,101,0,0,59,60,5,116,0,0,60,
        61,5,116,0,0,61,62,5,105,0,0,62,63,5,110,0,0,63,64,5,103,0,0,64,
        2,1,0,0,0,65,66,5,117,0,0,66,67,5,114,0,0,67,68,5,108,0,0,68,69,
        5,61,0,0,69,4,1,0,0,0,70,71,5,117,0,0,71,72,5,115,0,0,72,73,5,101,
        0,0,73,74,5,114,0,0,74,75,5,110,0,0,75,76,5,97,0,0,76,77,5,109,0,
        0,77,78,5,101,0,0,78,79,5,61,0,0,79,6,1,0,0,0,80,81,5,112,0,0,81,
        82,5,97,0,0,82,83,5,115,0,0,83,84,5,115,0,0,84,85,5,61,0,0,85,8,
        1,0,0,0,86,87,5,68,0,0,87,88,5,97,0,0,88,89,5,116,0,0,89,90,5,97,
        0,0,90,91,5,98,0,0,91,92,5,97,0,0,92,93,5,115,0,0,93,94,5,101,0,
        0,94,95,5,110,0,0,95,96,5,97,0,0,96,97,5,109,0,0,97,98,5,101,0,0,
        98,99,5,61,0,0,99,10,1,0,0,0,100,101,5,76,0,0,101,102,5,111,0,0,
        102,103,5,97,0,0,103,104,5,100,0,0,104,105,5,84,0,0,105,106,5,101,
        0,0,106,107,5,114,0,0,107,108,5,109,0,0,108,109,5,105,0,0,109,110,
        5,110,0,0,110,111,5,97,0,0,111,112,5,108,0,0,112,12,1,0,0,0,113,
        114,5,76,0,0,114,115,5,111,0,0,115,116,5,97,0,0,116,117,5,100,0,
        0,117,118,5,67,0,0,118,119,5,117,0,0,119,120,5,115,0,0,120,121,5,
        116,0,0,121,122,5,111,0,0,122,123,5,109,0,0,123,124,5,101,0,0,124,
        125,5,114,0,0,125,14,1,0,0,0,126,127,5,76,0,0,127,128,5,111,0,0,
        128,129,5,97,0,0,129,130,5,100,0,0,130,131,5,84,0,0,131,132,5,114,
        0,0,132,133,5,97,0,0,133,134,5,110,0,0,134,135,5,115,0,0,135,136,
        5,97,0,0,136,137,5,99,0,0,137,138,5,116,0,0,138,139,5,105,0,0,139,
        140,5,111,0,0,140,141,5,110,0,0,141,16,1,0,0,0,142,143,5,68,0,0,
        143,144,5,101,0,0,144,145,5,116,0,0,145,146,5,101,0,0,146,147,5,
        99,0,0,147,148,5,116,0,0,148,18,1,0,0,0,149,150,5,99,0,0,150,151,
        5,117,0,0,151,152,5,115,0,0,152,153,5,116,0,0,153,154,5,111,0,0,
        154,155,5,109,0,0,155,156,5,101,0,0,156,157,5,114,0,0,157,20,1,0,
        0,0,158,159,5,116,0,0,159,160,5,101,0,0,160,161,5,114,0,0,161,162,
        5,109,0,0,162,163,5,105,0,0,163,164,5,110,0,0,164,165,5,97,0,0,165,
        166,5,108,0,0,166,22,1,0,0,0,167,168,5,116,0,0,168,169,5,114,0,0,
        169,170,5,97,0,0,170,171,5,110,0,0,171,172,5,115,0,0,172,173,5,97,
        0,0,173,174,5,99,0,0,174,175,5,116,0,0,175,176,5,105,0,0,176,177,
        5,111,0,0,177,178,5,110,0,0,178,179,5,115,0,0,179,180,5,95,0,0,180,
        181,5,111,0,0,181,182,5,102,0,0,182,183,5,95,0,0,183,184,5,101,0,
        0,184,185,5,97,0,0,185,186,5,99,0,0,186,187,5,104,0,0,187,188,5,
        95,0,0,188,189,5,112,0,0,189,190,5,101,0,0,190,191,5,114,0,0,191,
        192,5,105,0,0,192,193,5,111,0,0,193,194,5,100,0,0,194,24,1,0,0,0,
        195,196,5,99,0,0,196,197,5,99,0,0,197,198,5,95,0,0,198,199,5,114,
        0,0,199,200,5,101,0,0,200,201,5,108,0,0,201,202,5,97,0,0,202,203,
        5,116,0,0,203,204,5,105,0,0,204,205,5,111,0,0,205,206,5,110,0,0,
        206,207,5,115,0,0,207,208,5,104,0,0,208,209,5,105,0,0,209,210,5,
        112,0,0,210,211,5,95,0,0,211,212,5,119,0,0,212,213,5,105,0,0,213,
        214,5,116,0,0,214,215,5,104,0,0,215,216,5,95,0,0,216,217,5,100,0,
        0,217,218,5,101,0,0,218,219,5,103,0,0,219,220,5,114,0,0,220,221,
        5,101,0,0,221,222,5,101,0,0,222,26,1,0,0,0,223,224,5,115,0,0,224,
        225,5,116,0,0,225,226,5,114,0,0,226,227,5,117,0,0,227,228,5,99,0,
        0,228,229,5,116,0,0,229,230,5,117,0,0,230,231,5,114,0,0,231,232,
        5,101,0,0,232,233,5,100,0,0,233,234,5,95,0,0,234,235,5,116,0,0,235,
        236,5,114,0,0,236,237,5,97,0,0,237,238,5,110,0,0,238,239,5,115,0,
        0,239,240,5,97,0,0,240,241,5,99,0,0,241,242,5,116,0,0,242,243,5,
        105,0,0,243,244,5,111,0,0,244,245,5,110,0,0,245,246,5,115,0,0,246,
        28,1,0,0,0,247,248,5,115,0,0,248,249,5,116,0,0,249,250,5,97,0,0,
        250,251,5,114,0,0,251,252,5,116,0,0,252,253,5,100,0,0,253,254,5,
        97,0,0,254,255,5,116,0,0,255,256,5,101,0,0,256,257,5,61,0,0,257,
        30,1,0,0,0,258,259,5,101,0,0,259,260,5,110,0,0,260,261,5,100,0,0,
        261,262,5,100,0,0,262,263,5,97,0,0,263,264,5,116,0,0,264,265,5,101,
        0,0,265,266,5,61,0,0,266,32,1,0,0,0,267,268,5,108,0,0,268,269,5,
        105,0,0,269,270,5,109,0,0,270,271,5,105,0,0,271,272,5,116,0,0,272,
        273,5,61,0,0,273,34,1,0,0,0,274,275,5,100,0,0,275,276,5,101,0,0,
        276,277,5,103,0,0,277,278,5,114,0,0,278,279,5,101,0,0,279,280,5,
        101,0,0,280,281,5,61,0,0,281,36,1,0,0,0,282,286,5,34,0,0,283,285,
        8,0,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,
        1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,5,34,0,0,290,38,
        1,0,0,0,291,293,3,45,22,0,292,291,1,0,0,0,293,294,1,0,0,0,294,292,
        1,0,0,0,294,295,1,0,0,0,295,40,1,0,0,0,296,297,3,45,22,0,297,298,
        3,45,22,0,298,299,3,45,22,0,299,300,3,45,22,0,300,301,1,0,0,0,301,
        302,5,45,0,0,302,303,3,45,22,0,303,304,3,45,22,0,304,305,5,45,0,
        0,305,306,3,45,22,0,306,307,3,45,22,0,307,42,1,0,0,0,308,310,3,49,
        24,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,
        0,0,312,317,1,0,0,0,313,316,3,51,25,0,314,316,3,49,24,0,315,313,
        1,0,0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,
        1,0,0,0,318,44,1,0,0,0,319,317,1,0,0,0,320,321,7,1,0,0,321,46,1,
        0,0,0,322,323,7,2,0,0,323,48,1,0,0,0,324,325,7,3,0,0,325,50,1,0,
        0,0,326,327,7,4,0,0,327,52,1,0,0,0,328,330,7,5,0,0,329,328,1,0,0,
        0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,
        0,333,334,6,26,0,0,334,54,1,0,0,0,335,336,5,10,0,0,336,56,1,0,0,
        0,7,0,286,294,311,315,317,331,1,6,0,0
    ]

class DetectCommandsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    STRING = 19
    NUMBER = 20
    DATE = 21
    Pass = 22
    WS = 23
    NewLine = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Setting'", "'url='", "'username='", "'pass='", "'Databasename='", 
            "'LoadTerminal'", "'LoadCustomer'", "'LoadTransaction'", "'Detect'", 
            "'customer'", "'terminal'", "'transactions_of_each_period'", 
            "'cc_relationship_with_degree'", "'structured_transactions'", 
            "'startdate='", "'enddate='", "'limit='", "'degree='", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "DATE", "Pass", "WS", "NewLine" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "STRING", "NUMBER", 
                  "DATE", "Pass", "DIGIT", "LETTER", "ALPHANUM", "CHARACTER", 
                  "WS", "NewLine" ]

    grammarFileName = "DetectCommands.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


