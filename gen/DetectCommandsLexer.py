# Generated from C:/Term 6/Compiler design project/FraudDetection/grammar/DetectCommands.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,311,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,5,17,259,8,17,10,17,12,17,262,9,17,1,17,1,17,1,
        18,4,18,267,8,18,11,18,12,18,268,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,20,4,20,284,8,20,11,20,12,20,285,1,
        20,1,20,5,20,290,8,20,10,20,12,20,293,9,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,4,25,304,8,25,11,25,12,25,305,1,25,1,25,1,
        26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        0,45,0,47,0,49,0,51,22,53,23,1,0,6,1,0,34,34,1,0,48,57,2,0,65,90,
        97,122,3,0,48,57,65,90,97,122,2,0,45,46,64,64,3,0,9,9,13,13,32,32,
        312,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,63,1,0,0,0,
        5,68,1,0,0,0,7,78,1,0,0,0,9,84,1,0,0,0,11,98,1,0,0,0,13,111,1,0,
        0,0,15,124,1,0,0,0,17,140,1,0,0,0,19,147,1,0,0,0,21,156,1,0,0,0,
        23,165,1,0,0,0,25,193,1,0,0,0,27,221,1,0,0,0,29,232,1,0,0,0,31,241,
        1,0,0,0,33,248,1,0,0,0,35,256,1,0,0,0,37,266,1,0,0,0,39,270,1,0,
        0,0,41,283,1,0,0,0,43,294,1,0,0,0,45,296,1,0,0,0,47,298,1,0,0,0,
        49,300,1,0,0,0,51,303,1,0,0,0,53,309,1,0,0,0,55,56,5,83,0,0,56,57,
        5,101,0,0,57,58,5,116,0,0,58,59,5,116,0,0,59,60,5,105,0,0,60,61,
        5,110,0,0,61,62,5,103,0,0,62,2,1,0,0,0,63,64,5,117,0,0,64,65,5,114,
        0,0,65,66,5,108,0,0,66,67,5,61,0,0,67,4,1,0,0,0,68,69,5,117,0,0,
        69,70,5,115,0,0,70,71,5,101,0,0,71,72,5,114,0,0,72,73,5,110,0,0,
        73,74,5,97,0,0,74,75,5,109,0,0,75,76,5,101,0,0,76,77,5,61,0,0,77,
        6,1,0,0,0,78,79,5,112,0,0,79,80,5,97,0,0,80,81,5,115,0,0,81,82,5,
        115,0,0,82,83,5,61,0,0,83,8,1,0,0,0,84,85,5,68,0,0,85,86,5,97,0,
        0,86,87,5,116,0,0,87,88,5,97,0,0,88,89,5,98,0,0,89,90,5,97,0,0,90,
        91,5,115,0,0,91,92,5,101,0,0,92,93,5,110,0,0,93,94,5,97,0,0,94,95,
        5,109,0,0,95,96,5,101,0,0,96,97,5,61,0,0,97,10,1,0,0,0,98,99,5,76,
        0,0,99,100,5,111,0,0,100,101,5,97,0,0,101,102,5,100,0,0,102,103,
        5,84,0,0,103,104,5,101,0,0,104,105,5,114,0,0,105,106,5,109,0,0,106,
        107,5,105,0,0,107,108,5,110,0,0,108,109,5,97,0,0,109,110,5,108,0,
        0,110,12,1,0,0,0,111,112,5,76,0,0,112,113,5,111,0,0,113,114,5,97,
        0,0,114,115,5,100,0,0,115,116,5,67,0,0,116,117,5,117,0,0,117,118,
        5,115,0,0,118,119,5,116,0,0,119,120,5,111,0,0,120,121,5,109,0,0,
        121,122,5,101,0,0,122,123,5,114,0,0,123,14,1,0,0,0,124,125,5,76,
        0,0,125,126,5,111,0,0,126,127,5,97,0,0,127,128,5,100,0,0,128,129,
        5,84,0,0,129,130,5,114,0,0,130,131,5,97,0,0,131,132,5,110,0,0,132,
        133,5,115,0,0,133,134,5,97,0,0,134,135,5,99,0,0,135,136,5,116,0,
        0,136,137,5,105,0,0,137,138,5,111,0,0,138,139,5,110,0,0,139,16,1,
        0,0,0,140,141,5,68,0,0,141,142,5,101,0,0,142,143,5,116,0,0,143,144,
        5,101,0,0,144,145,5,99,0,0,145,146,5,116,0,0,146,18,1,0,0,0,147,
        148,5,99,0,0,148,149,5,117,0,0,149,150,5,115,0,0,150,151,5,116,0,
        0,151,152,5,111,0,0,152,153,5,109,0,0,153,154,5,101,0,0,154,155,
        5,114,0,0,155,20,1,0,0,0,156,157,5,116,0,0,157,158,5,101,0,0,158,
        159,5,114,0,0,159,160,5,109,0,0,160,161,5,105,0,0,161,162,5,110,
        0,0,162,163,5,97,0,0,163,164,5,108,0,0,164,22,1,0,0,0,165,166,5,
        116,0,0,166,167,5,114,0,0,167,168,5,97,0,0,168,169,5,110,0,0,169,
        170,5,115,0,0,170,171,5,97,0,0,171,172,5,99,0,0,172,173,5,116,0,
        0,173,174,5,105,0,0,174,175,5,111,0,0,175,176,5,110,0,0,176,177,
        5,115,0,0,177,178,5,95,0,0,178,179,5,111,0,0,179,180,5,102,0,0,180,
        181,5,95,0,0,181,182,5,101,0,0,182,183,5,97,0,0,183,184,5,99,0,0,
        184,185,5,104,0,0,185,186,5,95,0,0,186,187,5,112,0,0,187,188,5,101,
        0,0,188,189,5,114,0,0,189,190,5,105,0,0,190,191,5,111,0,0,191,192,
        5,100,0,0,192,24,1,0,0,0,193,194,5,99,0,0,194,195,5,99,0,0,195,196,
        5,95,0,0,196,197,5,114,0,0,197,198,5,101,0,0,198,199,5,108,0,0,199,
        200,5,97,0,0,200,201,5,116,0,0,201,202,5,105,0,0,202,203,5,111,0,
        0,203,204,5,110,0,0,204,205,5,115,0,0,205,206,5,104,0,0,206,207,
        5,105,0,0,207,208,5,112,0,0,208,209,5,95,0,0,209,210,5,119,0,0,210,
        211,5,105,0,0,211,212,5,116,0,0,212,213,5,104,0,0,213,214,5,95,0,
        0,214,215,5,100,0,0,215,216,5,101,0,0,216,217,5,103,0,0,217,218,
        5,114,0,0,218,219,5,101,0,0,219,220,5,101,0,0,220,26,1,0,0,0,221,
        222,5,115,0,0,222,223,5,116,0,0,223,224,5,97,0,0,224,225,5,114,0,
        0,225,226,5,116,0,0,226,227,5,100,0,0,227,228,5,97,0,0,228,229,5,
        116,0,0,229,230,5,101,0,0,230,231,5,61,0,0,231,28,1,0,0,0,232,233,
        5,101,0,0,233,234,5,110,0,0,234,235,5,100,0,0,235,236,5,100,0,0,
        236,237,5,97,0,0,237,238,5,116,0,0,238,239,5,101,0,0,239,240,5,61,
        0,0,240,30,1,0,0,0,241,242,5,108,0,0,242,243,5,105,0,0,243,244,5,
        109,0,0,244,245,5,105,0,0,245,246,5,116,0,0,246,247,5,61,0,0,247,
        32,1,0,0,0,248,249,5,100,0,0,249,250,5,101,0,0,250,251,5,103,0,0,
        251,252,5,114,0,0,252,253,5,101,0,0,253,254,5,101,0,0,254,255,5,
        61,0,0,255,34,1,0,0,0,256,260,5,34,0,0,257,259,8,0,0,0,258,257,1,
        0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,
        0,0,0,262,260,1,0,0,0,263,264,5,34,0,0,264,36,1,0,0,0,265,267,3,
        43,21,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,
        1,0,0,0,269,38,1,0,0,0,270,271,3,43,21,0,271,272,3,43,21,0,272,273,
        3,43,21,0,273,274,3,43,21,0,274,275,1,0,0,0,275,276,5,45,0,0,276,
        277,3,43,21,0,277,278,3,43,21,0,278,279,5,45,0,0,279,280,3,43,21,
        0,280,281,3,43,21,0,281,40,1,0,0,0,282,284,3,47,23,0,283,282,1,0,
        0,0,284,285,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,291,1,0,
        0,0,287,290,3,49,24,0,288,290,3,47,23,0,289,287,1,0,0,0,289,288,
        1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,42,1,
        0,0,0,293,291,1,0,0,0,294,295,7,1,0,0,295,44,1,0,0,0,296,297,7,2,
        0,0,297,46,1,0,0,0,298,299,7,3,0,0,299,48,1,0,0,0,300,301,7,4,0,
        0,301,50,1,0,0,0,302,304,7,5,0,0,303,302,1,0,0,0,304,305,1,0,0,0,
        305,303,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,6,25,0,0,
        308,52,1,0,0,0,309,310,5,10,0,0,310,54,1,0,0,0,7,0,260,268,285,289,
        291,305,1,6,0,0
    ]

class DetectCommandsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    STRING = 18
    NUMBER = 19
    DATE = 20
    Pass = 21
    WS = 22
    NewLine = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Setting'", "'url='", "'username='", "'pass='", "'Databasename='", 
            "'LoadTerminal'", "'LoadCustomer'", "'LoadTransaction'", "'Detect'", 
            "'customer'", "'terminal'", "'transactions_of_each_period'", 
            "'cc_relationship_with_degree'", "'startdate='", "'enddate='", 
            "'limit='", "'degree='", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "DATE", "Pass", "WS", "NewLine" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "STRING", "NUMBER", "DATE", 
                  "Pass", "DIGIT", "LETTER", "ALPHANUM", "CHARACTER", "WS", 
                  "NewLine" ]

    grammarFileName = "DetectCommands.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


